#!/usr/bin/env ruby

require 'ollama'
include Ollama
require 'irb'
require 'irb/history'

# The base_url method returns the Ollama API base URL.
#
# It first checks for the OLLAMA_URL environment variable.
# If not set, it defaults to 'http://' followed by the OLLAMA_HOST environment variable.
#
# @return [ String ] the base URL for the Ollama API
def base_url
  ENV['OLLAMA_URL'] || 'http://%s' % ENV.fetch('OLLAMA_HOST')
end

# The ollama method provides access to a configured Ollama client instance.
#
# This method initializes and returns a singleton instance of the Ollama client,
# using the base URL specified in the base_url parameter. If an instance already
# exists, it returns the cached version instead of creating a new one.
#
# @param base_url [ String ] the base URL for the Ollama API endpoint
# @return [ Ollama::Client ] a configured Ollama client instance
def ollama
  $ollama ||= Client.new(base_url:)
end
IRB.setup nil
IRB.conf[:MAIN_CONTEXT] = IRB::Irb.new.context
IRB.conf[:HISTORY_FILE] = File.join(ENV.fetch('HOME'), '.ollama_console-history')
IRB.conf[:SAVE_HISTORY] = 1000
require 'irb/ext/multi-irb'
if io = IRB.conf[:MAIN_CONTEXT].io and io.support_history_saving?
  io.load_history
  at_exit { io.save_history }
end
puts "Now connected to ollama server, version %s, at %s" % [
  Term::ANSIColor.bold { ollama.version.version },
  Term::ANSIColor.hyperlink(ollama.base_url) { ollama.base_url },
]
ollama.help
IRB.irb nil, ollama
